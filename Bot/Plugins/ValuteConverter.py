import logging

import requests
import vk_api
from vk_api.bot_longpoll import VkBotEventType
from vk_api.utils import get_random_id

from Bot.Plugins.BasePlug import BasePlug


class ValuteConverter(BasePlug):
    name = "ValuteConverter"
    description = "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—ã"
    version = "rolling"
    keywords = ('–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä', 'converter')
    whoCan = ''
    event_type = ""

    def __init__(self, bot: object):
        self.bot: object = bot
        self.onStart()




    def __sendMessage(self, peer_id, msg):
        self.bot.vk.method("messages.send", {"peer_id": peer_id, "message": msg, "random_id": get_random_id()})

    def work(self, peer_id, msg: str, event: vk_api.bot_longpoll.VkBotEvent) -> None:
        api = "https://www.cbr-xml-daily.ru/daily_json.js"
        r = requests.get(api)
        encode = r.json()
        text = msg.split()
        usd = encode["Valute"]["USD"]["Value"]
        eur = encode["Valute"]["EUR"]["Value"]
        try:
            val = float(text[1])
        except ValueError:
            self.__sendMessage(peer_id, "–¢—ã –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä—É!\n–ù–∞–ø—Ä–∏–º–µ—Ä: /–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä 5 usd")
        if val <= 0:
            self.__sendMessage(peer_id, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
        elif text[2] == "usd":
            self.__sendMessage(peer_id,
                               f"üí∞{'%g' % val}$:\n–í —Ä—É–±–ª—è—Ö: {round(val * usd, 3)}‚ÇΩ\n–í –µ–≤—Ä–æ: {round(val * usd / eur, 3)}‚Ç¨")
        elif text[2] == "eur":
            self.__sendMessage(peer_id,
                               f"üí∞{'%g' % val}‚Ç¨:\n–í —Ä—É–±–ª—è—Ö: {round(val * eur, 3)}‚ÇΩ\n–í –¥–æ–ª–ª–∞—Ä–∞—Ö:{round(val * eur / usd, 3)}$")
        else:
            self.__sendMessage(peer_id, "–í—ã–±–µ—Ä–∏: usd –∏–ª–∏ eur!\n–ù–∞–ø—Ä–∏–º–µ—Ä: /–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä 5 usd")

    def onStart(self) -> None:
        logging.info(f"{self.name} is loaded")

    def onStop(self) -> None:
        logging.info(f"{self.name} is disabling")
